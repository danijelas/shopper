require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ListsController, type: :controller do

  let(:user) { create(:user) }

  before(:each) do
    login_user(user)
  end

  describe "GET index" do
    it "return all lists that belongs to current user" do
      second_user = create(:user)
      list = create(:list, user: user)
      list1 = create(:list, user: user)
      list2 = create(:list, user: second_user)
      list3 = create(:list, user: second_user)
      get :index
      expect(assigns(:lists)).to match_array([list,list1])
      expect(assigns(:lists)).not_to match_array([list,list1,list2,list3])
      expect(response).to be_success
      expect(response).to have_http_status(200)
      expect(response).to render_template("index")
    end
  end

  describe "GET show" do
    it "return list with sorted items" do      
      list = create(:list, user: user)
      category1 = user.categories[0]
      category2 = user.categories[1]
      category3 = user.categories[2]
      category4 = create(:category)
      item1 = create(:item, category: category1, list: list)
      item2 = create(:item, category: category2, list: list)
      item3 = create(:item, category: category1, list: list)
      item4 = create(:item, category: category2, list: list)
      item5 = create(:item, category: category3, list: list)
      item6 = create(:item, category: category4, list: list)

      sorted_items = Hash.new
      sorted_items[category1.name] = [item1]
      sorted_items[category2.name] = [item2]
      sorted_items[category1.name] << item3
      sorted_items[category2.name] << item4
      sorted_items[category3.name] = [item5]
      sorted_items[category4.name] = [item6]
      # sorted_items[category4.name] = [item6]
      # sorted_items[category3.name] = [item5]
      # sorted_items[category2.name] = [item4]
      # sorted_items[category1.name] = [item3]
      # sorted_items[category2.name] << item2
      # sorted_items[category1.name] << item1
      get :show, id: list
      expect(response).to be_success
      expect(response).to have_http_status(200)
      expect(response).to render_template("show")
      expect(assigns(:items_sorted_by_category)).to eq(sorted_items)
    end
  end

  describe "GET new" do
    it "assigns a new list as @list" do
      get :new
      expect(response).to be_success
      expect(response).to have_http_status(200)
      expect(response).to render_template("new")
      expect(assigns(:list)).to be_a_new(List)
    end
  end

  describe "GET edit" do
    it "edits list" do
      list = create(:list, user: user)
      category1 = user.categories[0]
      category2 = user.categories[1]
      item1 = create(:item, category: category1, list: list)
      item2 = create(:item, category: category2, list: list)
      item3 = create(:item, category: category1, list: list)
      sorted_items = []
      sorted_items << item1
      sorted_items << item3
      sorted_items << item2
      get :edit, id: list
      expect(response).to be_success
      expect(response).to have_http_status(200)
      expect(response).to render_template("edit")
      expect(assigns(:list)).to eq(list)
      expect(assigns(:list).user).to eq(user)
      expect(assigns(:items)).to eq(sorted_items)
    end
  end

  describe "POST create" do
    context "with valid params" do
      it "creates a new List" do
        i1 = FactoryGirl.attributes_for(:item)
        i1[:category_id] = user.categories.first.id
        i2 = FactoryGirl.attributes_for(:item)
        i2[:category_id] = "newCategory1"
        i3 = FactoryGirl.attributes_for(:item)
        i3[:category_id] = "newCategory2"
        i4 = FactoryGirl.attributes_for(:item)
        i4[:category_id] = "newCategory2"
        i = {}
        i['0'] = i1
        i['1'] = i2
        i['2'] = i3
        i['3'] = i4
        l = FactoryGirl.attributes_for(:list)
        l[:items_attributes] = i
        expect {
          post :create, list: l, user: user
        }.to change(List, :count).by(1)
        list = (assigns(:list))
        expect(list).to be_a(List)
        expect(list).to be_persisted
        expect(response).to redirect_to(List.last)
        expect(list.user).to eq(user)
        expect(list.user.categories.size).to eq(8)
        items = list.items
        expect(items[0].category.name).to eq(user.categories.first.name)
        expect(items[1].category.name).to eq("newCategory1")
        expect(items[2].category.name).to eq("newCategory2")
        expect(items[3].category.name).to eq("newCategory2")
      end
    end

    context "with invalid params" do
      it "does not save the new list" do
        expect {
          post :create, list: { name: nil }, user: user
        }.to change(List, :count).by(0)
        expect(assigns(:list)).to be_a_new(List)
        expect(assigns(:list)).to_not be_persisted
        expect(response).to render_template("new")
        expect(assigns(:list).user).to eq(user)
      end
    end
  end

  describe "PUT update" do

    let(:list) {create (:list), user: user}    

    context "with valid params" do
      it "updates the requested list" do
        i1 = create(:item, list: list, category: user.categories.first)
        i2 = create(:item, list: list, category: FactoryGirl.create(:category, user: user))
        i3 = create(:item, list: list, category: FactoryGirl.create(:category, user: user))
        i4 = create(:item, list: list, category: FactoryGirl.create(:category, user: user))
        i1 = FactoryGirl.attributes_for(:item, id: i1, category_id: user.categories[1].id, user: user)
        i2 = FactoryGirl.attributes_for(:item, id: i2, category_id: "updatedNewCategory1", user: user)
        i3 = FactoryGirl.attributes_for(:item, id: i3, category_id: "updatedNewCategory2", user: user)
        i4 = FactoryGirl.attributes_for(:item, id: i4, category_id: "updatedNewCategory2", user: user)
        i = {}
        i['0'] = i1
        i['1'] = i2
        i['2'] = i3
        i['3'] = i4
        attrs = FactoryGirl.attributes_for(:list)
        attrs[:items_attributes] = i
        put :update, id:list, list: attrs, user: user
        list.reload
        user.reload
        # binding.pry
        expect(assigns(:list)).to eq(list)
        expect(list.name).to eq(list[:name])
        expect(response).to redirect_to(list)
        expect(assigns(:list).user).to eq(user)
        categories = user.categories
        expect(categories.size).to eq(11)
        items = list.items
        expect(items.size).to eq(4)
        expect(items[0].category.name).to eq(categories[1].name)
        expect(items[1].category.name).to eq("updatedNewCategory1")
        expect(items[2].category.name).to eq("updatedNewCategory2")
        expect(items[3].category.name).to eq("updatedNewCategory2")
      end
    end

    context "with invalid params" do
      it "does not update the requested list" do
        listName = list.name
        put :update, id:list, list: {name: nil}
        list.reload
        expect(list.name).to eq(listName)
        expect(assigns(:list)).to eq(list)
        expect(response).to render_template("edit")
        expect(assigns(:list).user).to eq(user)
      end 
    end
  end

  describe "DELETE destroy" do

    let!(:list) {create (:list), user: user}

    it "destroys the requested list" do
      expect {
        delete :destroy, id: list
      }.to change(List, :count).by(-1)
      expect(assigns(:list).user).to eq(user)
    end

    it "redirects to the lists list" do
      delete :destroy, id: list
      expect(response).to redirect_to(lists_url)
      expect(assigns(:list).user).to eq(user)
    end
  end

  describe "POST item_done" do
    let!(:list) {create (:list), user: user}
    let!(:item) {create (:item), list: list, done: false}

    it "toogles items done attribute" do
      post :item_done, id: list, item_id: item, format: :js
      item.reload
      expect(item.done).to eq(true)
      expect(assigns(:list).user).to eq(user)
    end
    
  end

end
