require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ListsController, type: :controller do

  let(:user) { create(:user) }

  before(:each) do
    login_user(user)
  end

  describe "GET index" do
    it "return all lists that belongs to current user" do
      second_user = create(:user)
      list = create(:list, user: user)
      list1 = create(:list, user: user)
      list2 = create(:list, user: second_user)
      list3 = create(:list, user: second_user)
      
      get :index
      
      expect(response).to be_success
      expect(response).to render_template("index")
      
      expect(assigns(:lists)).to match_array([list,list1])
      expect(assigns(:lists)).not_to match_array([list,list1,list2,list3])
    end
  end

  describe "GET show" do
    it "return list with sorted items" do      
      list = create(:list, user: user, currency: 'EUR')
      category1 = user.categories[0]
      category2 = user.categories[1]
      category3 = user.categories[2]
      category4 = create(:category)
      session[:current_category] = 2
      item1 = create(:item, category: category1, list: list, done: false)
      item2 = create(:item, category: category2, list: list, done: false)
      item3 = create(:item, category: category1, list: list, done: false)
      item4 = create(:item, category: category2, list: list, done: true)
      item5 = create(:item, category: category3, list: list, done: false)
      item6 = create(:item, category: category4, list: list, done: false)

      sorted_not_done_items = Hash.new
      sorted_not_done_items[category1.name] = [item1]
      sorted_not_done_items[category2.name] = [item2]
      sorted_not_done_items[category1.name] << item3
      sorted_not_done_items[category3.name] = [item5]
      sorted_not_done_items[category4.name] = [item6]

      sorted_done_items = Hash.new
      sorted_done_items[category2.name] = [item4]
    
      get :show, id: list
      
      expect(response).to be_success
      expect(response).to render_template("show")
      
      expect(assigns(:items_sorted_by_category_not_done)).to eq(sorted_not_done_items)
      expect(assigns(:items_sorted_by_category_done)).to eq(sorted_done_items)
      expect(session[:currency]).to eq('EUR')
      expect(session[:current_category]).to eq (0)
    end
  end

  describe "GET new" do
    it "assigns a new list as @list" do
      xhr :get, :new
      
      expect(response).to be_success
      expect(response).to render_template("new")
      
      expect(assigns(:list)).to be_a_new(List)
    end
  end

  describe "GET edit" do
    it "edits list" do
      list1 = create(:list, user: user)
      list2 = create(:list, user: user)
      list3 = create(:list, user: user)
      
      xhr :get, :edit, id: list2
      
      expect(response).to be_success
      expect(response).to render_template("edit")
      
      expect(assigns(:list)).to eq(list2)
      expect(assigns(:list).user).to eq(user)
    end
  end

  describe "POST create" do
    context "with valid params" do
      it "creates a new List" do
        l = FactoryGirl.attributes_for(:list)
        expect do
          xhr :post, :create, list: l, user: user
        end.to change(List, :count).by(1)
        
        expect(response).to be_success
        expect(response).to render_template("create")
        
        expect(assigns(:list)).to be_a(List)
        expect(assigns(:list)).to be_persisted
        expect(assigns(:list).user).to eq(user)
      end
    end

    context "with invalid params" do
      it "does not save the new list" do
        expect do
          xhr :post, :create, list: { name: nil }, user: user
        end.to_not change(List,:count)
        
        expect(response).to render_template("lists/create_error")
        
        expect(assigns(:list)).to be_a_new(List)
        expect(assigns(:list)).to_not be_persisted
        expect(assigns(:list).user).to eq(user)
      end
    end
  end

  describe "PUT update" do

    let(:list) {create (:list), user: user}    

    context "with valid params" do
      it "updates the requested list" do
        put :update, id: list, list: {name: 'updatedList'}, user: user, format: :js
        list.reload
        expect(list.name).to eq('updatedList')
      end
    end

    context "with invalid params" do
      it "does not update the requested list" do
        listName = list.name
        xhr :put, :update, id:list, list: {name: nil}
        list.reload

        expect(response).to render_template("lists/update_error")
        expect(list.name).to eq(listName)
      end 
    end
  end

  describe "DELETE destroy" do

    let!(:list) {create (:list), user: user}

    it "destroys the requested list" do
      expect do
        xhr :delete, :destroy, id: list
      end.to change(List, :count).by(-1)
      expect(response).to be_success
      expect(assigns(:list).user).to eq(user)
    end
  end

  # describe "POST item_done" do
  #   let!(:list) {create (:list), user: user}
  #   let!(:item) {create (:item), list: list, done: false}

  #   it "toogles items done attribute" do
  #     post :item_done, id: list, item_id: item, format: :js
  #     item.reload
  #     expect(item.done).to eq(true)
  #     expect(assigns(:list).user).to eq(user)
  #   end
    
  # end

  describe "GET change_category" do
    it "returns list of done items for selected category, 
        if category 0 returns list of all done items" do
      list = create(:list, user: user)
      category1 = user.categories[0]
      category2 = user.categories[1]
      item1 = create(:item, category: category1, list: list, price: 2, done: true)
      item2 = create(:item, category: category2, list: list, price: 4, done: true)
      item3 = create(:item, category: category1, list: list, price: 3, done: true)
      item4 = create(:item, category: category1, list: list, price: 5, done: false)
      items_done = []
      items_done << item3
      items_done << item1

      xhr :get, :change_category, id: list, category: category1

      expect(response).to be_success
      expect(assigns(:done_items)).to eq(items_done)
      expect(session[:current_category]).to eq (category1.id.to_s)

      items_done << item2

      xhr :get, :change_category, id: list, category: 0

      expect(response).to be_success
      expect(assigns(:done_items)).to eq(items_done)
      expect(session[:current_category]).to eq ("0")
    end
  end

end
